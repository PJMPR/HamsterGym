package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import Lalunaa.HamsterGym.Trainer;
import dao.mappers.IMapResultSetIntoEntity;
import dao.repositories.ITrainerRepository;
import dao.uow.IUnitOfWork;

public class TrainerRepository extends RepositoryBase<Trainer> implements ITrainerRepository {
	
	
	
	private PreparedStatement getName;
	private PreparedStatement getSurname;
	
    

	public TrainerRepository(Connection connection, 
		IMapResultSetIntoEntity<Trainer> mapper, IUnitOfWork uow) {
		super(connection,mapper, uow);
	
	
	try{
		 getName = connection.prepareStatement(getNameSql());
		 getSurname = connection.prepareStatement(getSurnameSql()); 
		 }catch(SQLException e){
	    e.printStackTrace();
    }		
	}	
	
	
	protected String getNameSql(){return "SELECT * FROM trainers where name = ?";}
	protected String getSurnameSql(){return "SELECT * FROM trainers where surname=?";}
	
	
		@Override
		protected String createTableSql() {
			return "" + "CREATE TABLE trainers("
					+ "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
					+ "name varchar(20)," + "surname varchar(50)" + ")";
		}

		@Override
		protected String tableName() {
			return "trainers";
		}
		
		protected String insertSql() {
			return "INSERT INTO trainers(name, surname) VALUES (?,?)";
		}
		
		protected String updateSql() {
			return "UPDATE trainers SET (name, surname)=(?,?) WHERE id=?";
		}
		
		protected String deleteSql(int id) {				
			return "DELETE FROM trainers WHERE id=?";
		}
		
		protected String selectAllSql() {
			return "SELECT * FROM trainers";
		}
		
		@Override
		protected void setUpdate(Trainer entity) throws SQLException {
			
			update.setString(1, entity.getName());
			update.setString(2, entity.getSurname());	
			
		}

		@Override
		protected void setInsert(Trainer entity) throws SQLException {
			
			insert.setString(1, entity.getName());
			insert.setString(2, entity.getSurname());		
				
		}

		private List<Trainer> searchBy(String value){
	        List<Trainer> trainers = new ArrayList<Trainer>();
	        try{
	            getName.setString(1,value);
	            ResultSet resultSet = getName.executeQuery();
	            while(resultSet.next()){
	                trainers.add(mapper.map(resultSet));
	            }
	        }catch (SQLException e){
	            e.printStackTrace();
	        }
	        return trainers;
	    }


		 public List<Trainer> withName(String name) {
		        return searchBy(name);
		    }


		    public List<Trainer> withSurname(String surname) {
		        return searchBy(surname);
		    }
		    
		   

			public List<Trainer> withActivities(Object activities) {
				return searchBy((String)activities);
			}

}
