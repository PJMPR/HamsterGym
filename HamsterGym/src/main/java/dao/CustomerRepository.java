package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;	
	
import dao.mappers.IMapResultSetIntoEntity;	
import dao.repositories.ICustomerRepository;
import dao.uow.IUnitOfWork;
import Lalunaa.HamsterGym.Customer;
	

	public class CustomerRepository extends RepositoryBase<Customer> 
	implements ICustomerRepository {
		
		private PreparedStatement getName;
		private PreparedStatement getSurname;
	    

		public CustomerRepository(Connection connection, 
			IMapResultSetIntoEntity<Customer> mapper, IUnitOfWork uow) {
			super(connection,mapper, uow);
		
		
		try{
			 getName = connection.prepareStatement(getNameSql());
			 getSurname = connection.prepareStatement(getSurNameSql());  
        }catch(SQLException e){
		    e.printStackTrace();
        }		
		}	
		
		
		protected String getNameSql(){return "SELECT * FROM customers where name = ?";}
		protected String getSurNameSql(){return "SELECT * FROM customers where surname=?";}

		
			@Override
			protected String createTableSql() {
				return "" + "CREATE TABLE customers("
						+ "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
						+ "name varchar(20)," + "surname varchar(50)" + ")";
			}

			@Override
			protected String tableName() {
				return "customers";
			}
			
			protected String insertSql() {
				return "INSERT INTO customer(name, surname, customerActivities) VALUES (?,?,?)";
			}
			
			protected String updateSql() {
				return "UPDATE customer SET (name, surname, customerActivities)=(?,?,?) WHERE id=?";
			}
			
			protected String deleteSql() {				
				return "DELETE FROM customer WHERE id=?";
			}
			
			protected String selectAllSql() {
				return "SELECT * FROM customers";
			}
			
			@Override
			protected void setUpdate(Customer entity) throws SQLException {
				update.setInt(1, entity.getId());
				update.setString(2, entity.getName());
				update.setString(3, entity.getSurname());								
			}

			@Override
			protected void setInsert(Customer entity) throws SQLException {
				update.setInt(1, entity.getId());
				update.setString(2, entity.getName());
				update.setString(3, entity.getSurname());				
			}

			private List<Customer> searchBy(String value){
		        List<Customer> customers = new ArrayList<Customer>();
		        try{
		            getName.setString(1,value);
		            ResultSet resultSet = getName.executeQuery();
		            while(resultSet.next()){
		                customers.add(mapper.map(resultSet));
		            }
		        }catch (SQLException e){
		            e.printStackTrace();
		        }
		        return customers;
		    }


			 public List<Customer> withName(String name) {
			        return searchBy(name);
			    }


			    public List<Customer> withSurname(String surname) {
			        return searchBy(surname);
			    }
				
			}	
		

